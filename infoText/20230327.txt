2023-03-27

[HOC와 Mixins 비교]
 1. 하이 오더 컴포넌트 HOC (react에선 훅이라한댕)
  - 컴포넌트의 로직(코드)을 재사용하기 위한 고급기술

    1) NewsView, AskView, JobsView 
    -> 하이오더 컴포넌트로 분리 (얘네 혹시 모르니까 backupview폴더로 이동)
        : CreateListView.js , ListView.vue로 연결
        : api / index.js 에 createListView로 연결
        : this.$route.name으로 분기쳐서 "FETCH_LIST"로 가져옴


2. Mixins
 - 믹스인은 여러 컴포넌트 간에 공통으로 사용하고 있는 로직, 
    기능들을 재사용하는 방법
 - 믹스인에 정의할 수 있는 재사용 로직은 data, methods, created 등과 같은
    컴포넌트 옵션이다


[데이터 호출 시점]
1. 컴포넌트 라이프 사이클 훅
 - created : (컴포넌트가 생성)되자마자 호출되는 로직

2. 라우터 네비게이션 가드    
 - 특정 url로 접근하기 전 동작을 정의하는 속성(함수)
   1) route/index.js -> beforeEnter()


[async & await]
1. 자바스크립트의 동기적으로 코드를 작성하게 해줌

예제 1)
async function fetchData() {
   var List = await getUserList();
   console.log(List);
}

function getUserList() {
   return new Promise(function(resolve, reject) {
      var userList = ['user', 'user2', 'user3'];
      resolve(userList);
   })
}

예제 2)
async loginUser1() {
   try {
      var response = await axios.get('');
      if (response.data.id === 1) {
         var list = await axios.get('');
         this.items = list.data;
      }
   } catch (error) {
      // exception() 등 만들어서 예외처리 가능
      console.log(error);
   }
}


[외부 라이브러리 모듈화]
 - 이유
  1) Vue.js 관련 라이브러리가 없을 때 일반 라이브러리를 결합할수 있어야함
 - 종류
   : 차트, 데이트 피커, 테이블, 스피너